{
  "name": "grunt-exec",
  "description": "Grunt task for executing shell commands.",
  "version": "1.0.0",
  "homepage": "https://github.com/jharding/grunt-exec",
  "author": {
    "name": "Jake Harding",
    "email": "jacob.s.harding@gmail.com"
  },
  "contributors": [
    {
      "name": "Graeme Wicksted",
      "email": "graeme.wicksted@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jharding/grunt-exec.git"
  },
  "bugs": {
    "url": "https://github.com/jharding/grunt-exec/issues"
  },
  "license": "MIT",
  "main": "Gruntfile.js",
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "peerDependencies": {
    "grunt": ">=0.4"
  },
  "devDependencies": {
    "grunt": "^1.0.0",
    "grunt-contrib-jshint": "^1.0.0"
  },
  "keywords": [
    "grunt",
    "gruntplugin",
    "shell",
    "exec",
    "execute"
  ],
  "readme": "[![build status](https://secure.travis-ci.org/jharding/grunt-exec.png?branch=master)](http://travis-ci.org/jharding/grunt-exec)\r\ngrunt-exec\r\n==========\r\n\r\nGrunt plugin for executing shell commands.\r\n\r\n[![NPM](https://nodei.co/npm/grunt-exec.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/grunt-exec/)\r\n[![NPM](https://nodei.co/npm-dl/grunt-exec.png)](https://nodei.co/npm/grunt-exec/)\r\n\r\nInstallation\r\n------------\r\n\r\nInstall grunt-exec using npm:\r\n\r\n```\r\n$ npm install grunt-exec --save-dev\r\n```\r\n\r\nThen add this line to your project's *Gruntfile.js*:\r\n\r\n```javascript\r\ngrunt.loadNpmTasks('grunt-exec');\r\n```\r\n\r\nUsage\r\n-----\r\n\r\nThis plugin is a [multi task][types_of_tasks], meaning that grunt will \r\nautomatically iterate over all exec targets if a target is not specified.\r\n\r\nIf the exit code generated by the specified shell command is greater than 0, \r\ngrunt-exec will assume an error has occurred and will abort grunt immediately.\r\n\r\n[types_of_tasks]: http://gruntjs.com/configuring-tasks#task-configuration-and-targets\r\n\r\n### Properties\r\n\r\n*  __command__ (alias: __cmd__): The shell command to be executed. Must be a \r\n  string or a function that returns a string.\r\n*  __stdin__: If `true`, stdin will be redirected from the child process to the current process allowing user interactivity (EXPERIMENTAL)\r\n*  __stdout__: If `true`, stdout will be printed. Defaults to `true`.\r\n*  __stderr__: If `true`, stderr will be printed. Defaults to `true`.\r\n*  __cwd__: Current working directory of the shell command. Defaults to the \r\n  directory containing your Gruntfile.\r\n*  __exitCode__ (alias: __exitCodes__): The expected exit code(s), task will \r\n  fail if the actual exit code doesn't match. Defaults to `0`. Can be an array \r\n  for multiple allowed exit codes.\r\n*  __callback__: The callback function passed `child_process.exec`. Defaults to \r\n  a noop.\r\n* __options__: Options to provide to `child_process.exec`. [NodeJS Documentation](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\r\n  - `cwd` String Current working directory of the child process\r\n  - `env` Object Environment key-value pairs\r\n  - `encoding` String *(Default: 'utf8')*\r\n  - `shell` String Shell to execute the command with *(Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)*\r\n  - `timeout` Number *(Default: 0)*\r\n  - `maxBuffer` Number largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed **(Default: 200*1024)**\r\n  - `killSignal` String *(Default: 'SIGTERM')*\r\n  - `uid` Number Sets the user identity of the process. (See [setuid(2)](http://man7.org/linux/man-pages/man2/setuid.2.html).)\r\n  - `gid` Number Sets the group identity of the process. (See [setgid(2)](http://man7.org/linux/man-pages/man2/setgid.2.html).)\r\n\r\nIf the configuration is instead a simple `string`, it will be\r\ninterpreted as a full command itself:\r\n\r\n```javascript\r\nexec: {\r\n  echo_something: 'echo \"This is something\"'\r\n}\r\n```\r\n\r\n### Command Functions\r\n\r\nIf you plan on doing advanced stuff with grunt-exec, you'll most likely be using \r\nfunctions for the `command` property of your exec targets. This section details \r\na couple of helpful tips about command functions that could help make your life \r\neasier.\r\n\r\n#### Passing arguments from the command line\r\n\r\nCommand functions can be called with arbitrary arguments. Let's say we have the \r\nfollowing exec target that echoes a formatted name:\r\n\r\n```javascript\r\nexec: {\r\n  echo_name: {\r\n    cmd: function(firstName, lastName) {\r\n      var formattedName = [\r\n        lastName.toUpperCase(),\r\n        firstName.toUpperCase()\r\n      ].join(', ');\r\n\r\n      return 'echo ' + formattedName;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIn order to get `SIMPSON, HOMER` echoed, you'd run \r\n`grunt exec:echo_name:homer:simpson` from the command line.\r\n\r\n### Accessing `grunt` object\r\n\r\nAll command functions are called in the context of the `grunt` object that they \r\nare being ran with. This means you can access the `grunt` object through `this`.\r\n\r\n### Example\r\n\r\nThe following examples are available in grunt-exec's Gruntfile.\r\n\r\n```javascript\r\ngrunt.initConfig({\r\n  exec: {\r\n    remove_logs: {\r\n      command: 'rm -f *.log',\r\n      stdout: false,\r\n      stderr: false\r\n    },\r\n    list_files: {\r\n      cmd: 'ls -l **'\r\n    },\r\n    list_all_files: 'ls -la',\r\n    echo_grunt_version: {\r\n      cmd: function() { return 'echo ' + this.version; }\r\n    },\r\n    echo_name: {\r\n      cmd: function(firstName, lastName) {\r\n        var formattedName = [\r\n          lastName.toUpperCase(),\r\n          firstName.toUpperCase()\r\n        ].join(', ');\r\n\r\n        return 'echo ' + formattedName;\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nTesting\r\n-------\r\n\r\n```\r\n$ cd grunt-exec\r\n$ npm test\r\n```\r\n\r\nIssues\r\n------\r\n\r\nFound a bug? Create an issue on GitHub.\r\n\r\nhttps://github.com/jharding/grunt-exec/issues\r\n\r\nVersioning\r\n----------\r\n\r\nFor transparency and insight into the release cycle, releases will be numbered \r\nwith the follow format:\r\n\r\n`<major>.<minor>.<patch>`\r\n\r\nAnd constructed with the following guidelines:\r\n\r\n* Breaking backwards compatibility bumps the major\r\n* New additions without breaking backwards compatibility bumps the minor\r\n* Bug fixes and misc changes bump the patch\r\n\r\nFor more information on semantic versioning, please visit http://semver.org/.\r\n\r\nLicense\r\n-------\r\n\r\nOriginal Copyright (c) 2012-2014 [Jake Harding](http://thejakeharding.com)\r\nCopyright (c) 2016 grunt-exec\r\nLicensed under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-exec@1.0.0",
  "dist": {
    "shasum": "0ebec8299de325f49b5bc780ebf3ee38621c8941"
  },
  "_from": "grunt-exec@",
  "_resolved": "https://registry.npmjs.org/grunt-exec/-/grunt-exec-1.0.0.tgz"
}
