{
  "name": "grunt-banner",
  "description": "Adds a simple banner to files",
  "version": "0.6.0",
  "homepage": "https://github.com/mattstyles/grunt-banner",
  "author": {
    "name": "Matt Styles",
    "email": "matt@veryfizzyjelly.com",
    "url": "https://github.com/mattstyles"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mattstyles/grunt-banner.git"
  },
  "bugs": {
    "url": "https://github.com/mattstyles/grunt-banner/issues"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "files": [
    "tasks",
    "History.md",
    "LICENSE-MIT"
  ],
  "dependencies": {
    "chalk": "^1.1.0"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-copy": "^0.8.0",
    "grunt-contrib-jshint": "^0.11.2",
    "grunt-contrib-nodeunit": "^0.4.1",
    "load-grunt-tasks": "^3.2.0",
    "time-grunt": "^1.2.1"
  },
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "banner",
    "build"
  ],
  "readme": "# grunt-banner\n\n[![NPM version](https://img.shields.io/npm/v/grunt-banner.svg)](https://www.npmjs.com/package/grunt-banner)\n[![Build Status](https://img.shields.io/travis/mattstyles/grunt-banner/master.svg)](https://travis-ci.org/mattstyles/grunt-banner)\n[![Dependency Status](https://img.shields.io/david/mattstyles/grunt-banner.svg)](https://david-dm.org/mattstyles/grunt-banner#info=deependencies)\n[![peerDependency Status](https://img.shields.io/david/peer/mattstyles/grunt-banner.svg)](https://david-dm.org/mattstyles/grunt-banner#info=peerDependencies)\n[![devDependency Status](https://img.shields.io/david/dev/mattstyles/grunt-banner.svg)](https://david-dm.org/mattstyles/grunt-banner#info=devDependencies)\n\n> Adds a simple banner to files\n\n\n## Getting Started\n\nThis plugin requires Grunt `>=0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-banner --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-banner');\n```\n\nOr if you are using [matchdep](https://github.com/tkellen/node-matchdep) it will be included along with other `grunt-*` tasks by using this line of JavaScript:\n\n```js\nrequire('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);\n```\n\n\n## The \"usebanner\" task\n\n*grunt-banner renamed its task from `banner` to `usebanner` as a `banner` is often used to hold a banner template for a number of grunt plugins.*\n\n\n### Overview\n\nIn your project's Gruntfile, add a section named `usebanner` to the data object passed into `grunt.initConfig()`.\n\nThe wildcard selector `*` is perfectly valid for selecting targets to add a banner to.\n\n```js\ngrunt.initConfig({\n  usebanner: {\n    taskName: {\n      options: {\n        position: 'top',\n        banner: '// banner text <%= templates encouraged %>',\n        linebreak: true\n      },\n      files: {\n        src: [ 'path/to/file.ext', 'path/to/another/*.ext' ]\n      }\n    }\n  }\n})\n```\n\n\n### Options\n\n#### options.position\n\nType: `String`  \nDefault: `'top'`  \nValue range: `'top'` or `'bottom'` or `'replace'`\n\nThe position to place the banner - *either* the top or bottom or in place of the contents in the desired file specified by `'replaceContent'` when and existing banner is replaced by `grunt-banner`.\n\nWhen ```position``` is set to `'replace'`, this *implies* ```options.replace: true``` unless that option has explicitly been set by the user already (see below).\n\nWhen ```position``` is set to `'replace'` and replacement fails, i.e. no existing banner could be spotted, then `grunt-banner` falls back to regular ```position: 'top'``` | ```position: 'bottom'``` banner insertion behaviour.\n\nIn short: `grunt-banner` will always either *replace* or *add* a banner!\n\n#### options.replace\n\nType: `Boolean`, `String`, `RegExp` or `Function`\n\nThe text in the specified file that the banner should replace. When ```position``` is set to `'replace'`, every occurrence of a banner (see below for more on how existing banners are located) will be replaced by the new one. When ```position``` is set to either `'top'` or `'bottom'`, then the existing banners will be removed and replaced by a single new banner at the top or bottom of the file as directed by the ```position``` setting.\n\nThese ```options.replace``` parameter types / values are supported:\n\n+ Boolean `false` (default) - do not look for existing banners; simply add the banner at the specified position (top / bottom).\n\n+ Boolean `true` - 'smart' replace mode: use the built-in 'smart' locate-and-mark scanner to dig out the existing banners (more on the rules what maketh a banner below).\n\n+ (string) - replace any part of the source code which matches this *implicit regex*.\n\n  > This means most strings are matched as-is, but do not get mistaken about this: dot `.`, star `*` et al will not be the *literal characters* you might have expected, but are treated as regex operators! E.g. `replace: \"/* blurb */\"` will **not** work as if a literal string, since the stars `*` in there will make it match lines like `// blurb //` but **will not** match an actual C-style comment line `/* blurb */`. You will need to specify the proper regex string for that instead: `replace: \"\\/\\* blurb \\*\\/\"`.\n\n  > Also note that *every* regex match will be replaced by the specified banner. If your regex is not selective or precise enough, you may end up with some surprising replacements. **This is not a bug. You are responsible for providing *fitting* regexes to have `grunt-banner` match against.**\n\n+ (RegExp) - a rexexp instance to match against. The same caveats as the (string) type value above apply.\n\n+ (function) - provide your own callback method to locate and mark the input. The interface for the callback function is:\n\n  ```\n  function (fileContents, newBanner, insertPositionMarker, src, options)\n  ```\n\n  which should *return* the marked `fileContents`, i.e. the `fileContents` with all banners eligible for replacement removed and replaced by a simple `insertPositionMarker` string (see below). Your locate-and-match callback may insert *one*, *multiple* markers or *none*: `grunt-banner` will check how many markers you injected and either replace them when one or more markers are seen, or when none are found, revert to its basic `top|bottom` position-based banner *insertion* process.\n\n  The callback function parameters:\n\n  + `fileContents` (string) - the contents of the `src` file.\n\n  + `newBanner` (string) - the new banner to be inserted by `grunt-banner`.\n\n    > This (and the `options` parameter, see below) allows you to customize `grunt-banner` behaviour to an extreme degree, even providing your own custom *replacer* entirely: simply return your processed result with a single marker and reduce the `options.banner` to an empty string. But I digress...\n\n  + `insertPositionMarker` (string) - the insert marker.\n\n    Currently this is the Unicode `REPLACEMENT CHARACTER` character, i.e. `\\uFFFD`. We *assume* your original file content does not contain this marker already.\n\n  + `src` (string) - the path to the file being processed.\n\n  + `options` (object reference) - a *reference* to the current `options` object as used by `grunt-banner`.\n\n    > This **is not** the same as the `options` object you provided through your `Gruntfile`; this is a reference to the updated/augmented clone of that original as used by `grunt-banner` internally.\n    >\n    > Though the following coding practice should be frowned upon as 'side effects' are generally undesirable, you *can* tweak the `options.banner` value to suit your custom needs, for example.\n\n    **Tread with great care when you are about to *edit* attributes in this `options` object reference! The fact that you *can* doesn't mean you *should* fiddle with it!**\n\n\n#### options.banner\nType: `String`\n\nThe text to use as a banner. Templated strings are perfectly acceptable and encouraged.\n\n#### options.pattern\nType: `String`\n\nAllows the banner to be added only if the supplied pattern matches.\n\n#### options.linebreak\nType: `Boolean`  \nDefault: `true`\n\nSet `linebreak` to true to add a line break between banner and file content.\n\n#### options.process\nType: `Function`\n\nAllows the banner to be generated for each file using the output of the process function.\n\n\n\n\n### The ```options.replace: true``` default locate-and-mark functionality\n\nThe default locate-and-mark process, invoked when you specify the `replace: true` option (or `position: \"replace\"` without any `replace:` value to go with that one) is set up to locate copyright banner comment chunks in either C or C++ style format, i.e. surrounded by `/*....*/` or single- or multiline `//` comment chunks.\n\nThe process will inspect each comment chunk which start at the **left edge** (hence we ignore all *indented* comment chunks!) and which span *entire* lines, hence ruling out any comments which are leading or trailing source code statements *on the same line*.\n\nThe last restriction placed on any 'old' banner to replace is that it **must** have the (case-**in**sensitive) word `Copyright` in there somewhere. And that word **must** be followed by a bit of non-whitespace blurb on the same line: generally a year, a name or both suffices to satisfy this last condition.\n\nAny such 'banner' block is marked for replacement in its entirety.\n\n> #### Warning Note:\n>\n> The replacer *does not* check if the *new* banner also includes the `Copyright` phrase, hence multiple applications of `grunt-banner` may lead to the later rounds of `grunt-banner` application *adding* the shiny new banner at the top (or bottom) of the source file.\n>\n\n\n### Usage Examples\n\n#### Basic Usage\n\nIn this example an `appConfig` is read from a JSON file and used to populate a `banner` template which is then used by `grunt-banner` to place at the top of some files. Each file in the array will have the banner placed on to it and all `.js` files in the `/more-scripts/` folder will have a banner thanks to the `*` wildcard.\n\n```js\nvar appConfig = grunt.file.readJSON( 'app-config.json' ) || {};\ngrunt.initConfig({\n  banner: '/* <%= appConfig.info.name %> - version <%= appConfig.info.version %> - ' +\n          '<%= grunt.template.today(\"dd-mm-yyyy\") %>\\n' +\n          '<%= appConfig.info.description %>\\n ' +\n          '&#169 <%= grunt.template.today(\"yyyy\") %> <%= appConfig.info.author.name %> ' +\n          '- <%= appConfig.info.author.email %> */\\n',\n  usebanner: {\n    dist: {\n      options: {\n        position: 'top',\n        banner: '<%= banner %>'\n      },\n      files: {\n        src: [ 'scripts/main-min.js', 'stylesheets/main-min.css', 'more-scripts/*.js' ]\n      }\n    }\n  }\n})\n```\n\n\n#### Process Usage\n\nBy supplying a process **function** you effectively take control of how the banner is generated, the task is still responsible for placing it. In essence, it replaces the need for a banner object being specified in your grunt config as you are creating it from code for each file. This gives you the flexibility to add file-specific data to your banners.\n\nThis example uses [grunt templating](http://gruntjs.com/api/grunt.template) to generate a banner that references the file name it is being appended to. Run the test cases to see this in action.\n\n```js\nusebanner: {\n  dist: {\n    options: {\n      position: 'top',\n      process: function ( filepath ) {\n        return grunt.template.process(\n          '// banner for file: <%= filename %>', {\n            data: {\n              filename: filepath.match(/\\/([^/]*)$/)[1]\n            }\n          }\n        );\n      }\n    },\n    files: {\n      src: [ 'test/tmp/someProcess.js' ]\n    }\n  }\n}\n```\n\n\n### Notes\n\n`grunt-banner` *adds* the banner to the head or foot of the files that are specified by the array passed to `files.src` unless ways to see if a banner already exists have been properly set up (```options.replace``` and/or ```position: 'replace'```).\n\nIt is up to the user to ensure that either the file should not already contain a banner or that the configured locate-and-mark means (default locate-and-mark function, user-specified regex or user-specified callback function) are sufficient to ensure that no undesired code chunk replacements may occur. To this end it is recommended to use the [grunt-contrib-clean](https://github.com/gruntjs/grunt-contrib-clean) task and only add banners to built code.\n\n\n## Contributing\n\nIn lieu of a formal style guide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n",
  "readmeFilename": "README.md",
  "_id": "grunt-banner@0.6.0",
  "dist": {
    "shasum": "b73d1c33f397a347cc089e0e49e15e5ae04a7fc1"
  },
  "_from": "grunt-banner@",
  "_resolved": "https://registry.npmjs.org/grunt-banner/-/grunt-banner-0.6.0.tgz"
}
